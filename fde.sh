#!/system/bin/sh
### FeraDroid Engine v0.25 | By FeraVolt. 2017 ###

clear;
KERNEL=$(cat /proc/version);
ROM=$(getprop ro.build.display.id);
RRAM=$(grep MemTotal /proc/meminfo);
SDK=$(getprop ro.build.version.sdk);
CPU=$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq);
MIN=$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq);
CORES=$(grep -c 'processor' /proc/cpuinfo);
echo "### FeraLab ###";
echo "";
echo "FeraDroid Engine v0.25";
echo "NO-root version";
echo "Firing up..";
echo "Device: $(getprop ro.product.brand) $(getprop ro.product.model)";
echo "MAX CPU freq: $((CPU/1000))Mhz";
echo "MIN CPU freq: $((MIN/1000))Mhz";
echo "CPU Cores online: $CORES";
echo "$RRAM";
echo "ROM version: $ROM";
echo "Android version: $(getprop ro.build.version.release)";
echo "SDK: $SDK";
echo "SElinux state: $(getenforce)";
echo "Kernel: $KERNEL";
setprop ro.feralab.engine 25;
sync;
sleep 1;
echo " ";
echo "[***Network gear***]";
setprop net.dns1 208.67.222.222;
echo "net.dns1 = $(getprop net.dns1)";
setprop net.dns2 208.67.220.220;
echo "net.dns2 = $(getprop net.dns2)";
setprop wifi.supplicant_scan_interval 300000;
echo "wifi.supplicant_scan_interval = $(getprop wifi.supplicant_scan_interval)";
setprop ro.telephony.call_ring.delay 0;
echo "ro.telephony.call_ring.delay = $(getprop ro.telephony.call_ring.delay)";
setprop ring.delay 0;
echo "ring.delay = $(getprop ring.delay)";
setprop ro.ril.enable.3g.prefix 1;
echo "ro.ril.enable.3g.prefix = $(getprop ro.ril.enable.3g.prefix)";
setprop ro.ril.enable.sdr 1;
echo "ro.ril.enable.sdr = $(getprop ro.ril.enable.sdr)";
setprop ro.ril.enable.gea3 1;
echo "ro.ril.enable.gea3 = $(getprop ro.ril.enable.gea3)";
setprop ro.ril.enable.a52 0;
echo "ro.ril.enable.a52 = $(getprop ro.ril.enable.a52)";
setprop ro.ril.enable.a53 1;
echo "ro.ril.enable.a53 = $(getprop ro.ril.enable.a53)";
setprop ro.ril.hep 1;
echo "ro.ril.hep = $(getprop ro.ril.hep)";
setprop ro.ril.enable.amr.wideband 1;
echo "ro.ril.enable.amr.wideband = $(getprop ro.ril.enable.amr.wideband)";
setprop persist.cust.tel.eons 1;
echo "persist.cust.tel.eons = $(getprop persist.cust.tel.eons)";
setprop persist.eons.enabled true;
echo "persist.eons.enabled = $(getprop persist.eons.enabled)";
setprop persist.wpa_supplicant.debug false;
echo "persist.wpa_supplicant.debug = $(getprop persist.wpa_supplicant.debug)";
setprop persist.bandwidth.enable 0;
echo "persist.bandwidth.enable = $(getprop persist.bandwidth.enable)";
setprop net.tcp.buffersize.default 4096,87380,110208,4096,16384,110208;
echo "net.tcp.buffersize.default = $(getprop net.tcp.buffersize.default)";
setprop net.tcp.buffersize.wifi 4095,87380,110208,4096,16384,110208;
echo "net.tcp.buffersize.wifi = $(getprop net.tcp.buffersize.wifi)";
setprop net.tcp.buffersize.umts 4095,87380,110208,4096,16384,110208;
echo "net.tcp.buffersize.umts = $(getprop net.tcp.buffersize.umts)";
setprop net.tcp.buffersize.hsdpa 4096,32768,65536,4096,32768,65536;
echo "net.tcp.buffersize.hsdpa = $(getprop net.tcp.buffersize.hsdpa)";
setprop net.tcp.buffersize.hspa 4096,32768,65536,4096,32768,65536;
echo "net.tcp.buffersize.hspa = $(getprop net.tcp.buffersize.hspa)";
setprop net.tcp.buffersize.hsupa 4096,32768,65536,4096,32768,65536;
echo "net.tcp.buffersize.hsupa = $(getprop net.tcp.buffersize.hsupa)";
setprop net.tcp.buffersize.edge 4093,26280,35040,4096,16384,35040;
echo "net.tcp.buffersize.edge = $(getprop net.tcp.buffersize.edge)";
setprop net.tcp.buffersize.gprs 4092,8760,11680,4096,8760,11680;
echo "net.tcp.buffersize.gprs = $(getprop net.tcp.buffersize.gprs)";
echo " ";
echo "[***Cleaner gear***]";
rm -f /cache/*.apk;
rm -f /cache/*.tmp;
rm -f /cache/*.log;
rm -f /cache/*.txt;
rm -Rf /cache/recovery;
rm -Rf /cache/backup;
rm -Rf /cache/lost+found;
rm -Rf /sdcard/LOST.DIR;
rm -Rf /sdcard/found000;
rm -Rf /sdcard/LazyList;
rm -Rf /sdcard/cleanmaster;
rm -Rf /sdcard/albumthumbs;
rm -Rf /sdcard/kunlun;
rm -Rf /sdcard/.antutu;
rm -Rf /sdcard/.estrongs;
rm -Rf /sdcard/.taobao;
rm -Rf /sdcard/baidu;
rm -Rf /sdcard/Backucup;
rm -Rf /sdcard/UnityAdsVideoCache;
rm -f /sdcard/fix_permissions.log;
echo " ";
echo "[***Battery gear***]";
if [ -e /sys/module/lpm_levels/parameters/sleep_disabled ]; then
 echo "LowPower mode 1 support detected. Activating."
 echo "0" > /sys/module/lpm_levels/parameters/sleep_disabled;
fi;
if [ "$CORES" -le "3" ]; then
 if [ -e /sys/module/pm2/modes/cpu0/power_collapse/suspend_enabled ]; then
  echo "LowPower mode 2 support detected. Activating.."
  echo "1" > /sys/module/pm2/modes/cpu0/standalone_power_collapse/idle_enabled;
  echo "1" > /sys/module/pm2/modes/cpu1/standalone_power_collapse/idle_enabled;
  echo "1" > /sys/module/pm2/modes/cpu0/standalone_power_collapse/suspend_enabled;
  echo "1" > /sys/module/pm2/modes/cpu1/standalone_power_collapse/suspend_enabled;
  echo "1" > /sys/module/pm2/modes/cpu0/power_collapse/suspend_enabled;
  echo "1" > /sys/module/pm2/modes/cpu0/power_collapse/idle_enabled;
 fi;
fi;
if [ -e /sys/module/pm2/parameters/idle_sleep_mode ]; then
 echo "LowPower mode 3 support detected. Activating."
 echo "1" > /sys/module/pm2/parameters/idle_sleep_mode;
fi;
setprop power.saving.mode 1;
echo "power.saving.mode = $(getprop power.saving.mode)";
setprop persist.radio.ramdump 0;
echo "persist.radio.ramdump = $(getprop persist.radio.ramdump)";
setprop pm.sleep_mode 1;
echo "pm.sleep_mode = $(getprop pm.sleep_mode)";
setprop ro.ril.disable.power.collapse 0;
echo "ro.ril.disable.power.collapse = $(getprop ro.ril.disable.power.collapse)";
setprop ro.semc.enable.fast_dormancy false;
echo "ro.semc.enable.fast_dormancy = $(getprop ro.semc.enable.fast_dormancy)";
setprop ro.ril.fast.dormancy.rule 0;
echo "ro.ril.fast.dormancy.rule = $(getprop ro.ril.fast.dormancy.rule)";
setprop ro.ril.fast.dormancy 0;
echo "ro.ril.fast.dormancy = $(getprop ro.ril.fast.dormancy)";
setprop ro.config.hw_power_saving 1;
echo "ro.config.hw_power_saving = $(getprop ro.config.hw_power_saving)";
setprop dev.pm.dyn_samplingrate 1;
echo "dev.pm.dyn_samplingrate = $(getprop dev.pm.dyn_samplingrate)";
setprop persist.radio.add_power_save 1;
echo "persist.radio.add_power_save = $(getprop persist.radio.add_power_save)";
setprop ro.com.google.networklocation 0;
echo "ro.com.google.networklocation = $(getprop ro.com.google.networklocation)";
echo " ";
echo "[***VM gear***]";
setprop ro.HOME_APP_MEM 2439;
echo "ro.HOME_APP_MEM = $(getprop ro.HOME_APP_MEM)";
setprop ro.HOME_APP_ADJ 0;
echo "ro.HOME_APP_ADJ = $(getprop ro.HOME_APP_ADJ)";
setprop MIN_HIDDEN_APPS false;
echo "MIN_HIDDEN_APPS = $(getprop MIN_HIDDEN_APPS)";
setprop MIN_RECENT_TASKS false;
echo "MIN_RECENT_TASKS = $(getprop MIN_RECENT_TASKS)";
setprop APP_SWITCH_DELAY_TIME false;
echo "APP_SWITCH_DELAY_TIME = $(getprop APP_SWITCH_DELAY_TIME)";
setprop MIN_CRASH_INTERVAL false;
echo "MIN_CRASH_INTERVAL = $(getprop MIN_CRASH_INTERVAL)";
setprop dalvik.vm.checkjni false;
echo "dalvik.vm.checkjni = $(getprop dalvik.vm.checkjni)";
setprop dalvik.vm.check-dex-sum false;
echo "dalvik.vm.check-dex-sum = $(getprop dalvik.vm.check-dex-sum)";
setprop dalvik.vm.debug.alloc 0;
echo "dalvik.vm.debug.alloc = $(getprop dalvik.vm.debug.alloc)";
setprop dalvik.vm.deadlock-predict off;
echo "dalvik.vm.deadlock-predict = $(getprop dalvik.vm.deadlock-predict)";
setprop libc.debug.malloc 0;
echo "libc.debug.malloc = $(getprop libc.debug.malloc)";
setprop persist.sys.purgeable_assets 1;
echo "persist.sys.purgeable_assets = $(getprop persist.sys.purgeable_assets)";
setprop persist.added_boot_bgservices 2;
echo "persist.added_boot_bgservices = $(getprop persist.added_boot_bgservices)";
setprop ro.config.max_starting_bg 3;
echo "ro.config.max_starting_bg = $(getprop ro.config.max_starting_bg)";
setprop lmk.autocalc false;
echo "lmk.autocalc = $(getprop lmk.autocalc)";
setprop config.disable_atlas true;
echo "config.disable_atlas = $(getprop config.disable_atlas)";
echo " ";
echo "[***GPS gear***]";
setprop ro.ril.def.agps.feature 1;
echo "ro.ril.def.agps.feature = $(getprop ro.ril.def.agps.feature)";
setprop ro.ril.def.agps.mode 2;
echo "ro.ril.def.agps.mode = $(getprop ro.ril.def.agps.mode)";
echo " ";
echo "[***Kernel gear***]";
setprop ro.config.nocheckin 1;
echo "ro.config.nocheckin = $(getprop ro.config.nocheckin)";
setprop ro.kernel.android.checkjni 0;
echo "ro.kernel.android.checkjni = $(getprop ro.kernel.android.checkjni)";
setprop ro.kernel.checkjni 0;
echo "ro.kernel.checkjni = $(getprop ro.kernel.checkjni)";
setprop profiler.launch false;
echo "profiler.launch = $(getprop profiler.launch)";
setprop profiler.force_disable_err_rpt 1;
echo "profiler.force_disable_err_rpt = $(getprop profiler.force_disable_err_rpt)";
setprop profiler.force_disable_ulog 1;
echo "profiler.force_disable_ulog = $(getprop profiler.force_disable_ulog)";
setprop profiler.debugmonitor false;
echo "profiler.debugmonitor = $(getprop profiler.debugmonitor)";
setprop profiler.hung.dumpdobugreport false;
echo "profiler.hung.dumpdobugreport = $(getprop profiler.hung.dumpdobugreport)";
setprop logcat.live disable;
echo "logcat.live = $(getprop logcat.live)";
setprop debugtool.anrhistory 0;
echo "debugtool.anrhistory = $(getprop debugtool.anrhistory)";
setprop ro.vold.umsdirtyratio 30
echo "ro.vold.umsdirtyratio = $(getprop ro.vold.umsdirtyratio)";
echo " ";
echo "[***GPU gear***]";
if [ -e /system/lib/egl/libGLESv2_adreno200.so ]; then
 echo "Tuning Android and Adreno frienship..";
 setprop com.qc.hardware true;
 echo "com.qc.hardware = $(getprop com.qc.hardware)";
 setprop debug.qc.hardware true;
 echo "debug.qc.hardware = $(getprop debug.qc.hardware)";
 setprop debug.qctwa.statusbar 1;
 echo "debug.qctwa.statusbar = $(getprop debug.qctwa.statusbar)";
 setprop debug.qctwa.perservebuf 1;
 echo "debug.qctwa.perservebuf = $(getprop debug.qctwa.perservebuf)";
fi;
if [ "$SDK" -le "19" ]; then
 echo "ProjectButter..";
 setprop debug.sf.hw 1;
 echo "debug.sf.hw = $(getprop debug.sf.hw)";
 setprop debug.egl.hw 1;
 echo "debug.egl.hw = $(getprop debug.egl.hw)";
 setprop debug.gr.swapinterval 1;
 echo "debug.gr.swapinterval = $(getprop debug.gr.swapinterval)";
 setprop debug.gr.numframebuffers 3;
 echo "debug.gr.numframebuffers = $(getprop debug.gr.numframebuffers)";
 setprop persist.sys.scrollingcache 3;
 echo "persist.sys.scrollingcache = $(getprop persist.sys.scrollingcache)";
fi;
setprop persist.sys.ui.hw 1;
echo "persist.sys.ui.hw = $(getprop persist.sys.ui.hw)";
setprop video.accelerate.hw 1;
echo "video.accelerate.hw = $(getprop video.accelerate.hw)";
setprop hwui.render_dirty_regions false;
echo "hwui.render_dirty_regions = $(getprop hwui.render_dirty_regions)";
setprop debug.hwui.render_dirty_regions false;
echo "debug.hwui.render_dirty_regions = $(getprop debug.hwui.render_dirty_regions)";
setprop ro.config.disable.hw_accel false;
echo "ro.config.disable.hw_accel = $(getprop ro.config.disable.hw_accel)";
setprop ro.media.dec.jpeg.memcap 8000000;
echo "ro.media.dec.jpeg.memcap = $(getprop ro.media.dec.jpeg.memcap)";
setprop ro.media.enc.hprof.vid.bps 8000000;
echo "ro.media.enc.hprof.vid.bps = $(getprop ro.media.enc.hprof.vid.bps)";
setprop ro.media.enc.jpeg.quality 100;
echo "ro.media.enc.jpeg.quality = $(getprop ro.media.enc.jpeg.quality)";
setprop ro.floatingtouch.available 1;
echo "ro.floatingtouch.available = $(getprop ro.floatingtouch.available)";
setprop ro.fling.distance.coef 2.0;
echo "ro.fling.distance.coef = $(getprop ro.fling.distance.coef)";
setprop ro.fling.duration.coef 3.0;
echo "ro.fling.duration.coef = $(getprop ro.fling.duration.coef)";
setprop persist.sys.strictmode.disable true;
echo "persist.sys.strictmode.disable = $(getprop persist.sys.strictmode.disable)";
setprop vidc.debug.level 0;
echo "vidc.debug.level = $(getprop vidc.debug.level)";
setprop ro.camera.sound.forced 0;
echo "ro.camera.sound.forced = $(getprop ro.camera.sound.forced)";
if [ "$SDK" -le "21" ]; then
 echo "Fix stagerfright security vulnerabilities..";
 setprop media.stagefright.enable-player false;
 setprop media.stagefright.enable-http false;
 setprop media.stagefright.enable-aac false;
 setprop media.stagefright.enable-qcp false;
 setprop media.stagefright.enable-fma2dp false;
 setprop media.stagefright.enable-scan false;
fi;
if [ "$CORES" -ge "5" ]; then
 $B echo "Dithering - ON";
 setprop persist.sys.use_dithering 1;
else
 $B echo "Dithering - OFF";
 setprop persist.sys.use_dithering 0;
fi;
echo " ";
echo "[***FDE - OK***]";
